import React, { useState, useEffect, useCallback } from 'react';
import { Input, Button, Radio, Typography, Modal, Progress, Card, Space, Alert } from 'antd';
import { ClockCircleOutlined, ExclamationCircleOutlined, CheckCircleOutlined, StopOutlined, InfoCircleOutlined } from '@ant-design/icons';

const { Title, Text } = Typography;
const { confirm } = Modal;

const EnterPracticeExam = () => {
  const [examCode, setExamCode] = useState('');
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [topic, setTopic] = useState('');
  const [examStatus, setExamStatus] = useState('NOT_STARTED'); // NOT_STARTED, IN_PROGRESS, SUBMITTED
  const [result, setResult] = useState(null);
  const [timeLeft, setTimeLeft] = useState(null);
  const [examDuration, setExamDuration] = useState(30); // 30 ph√∫t m·∫∑c ƒë·ªãnh
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  // üü¶ Timer effect
  useEffect(() => {
    let timer;
    if (examStatus === 'IN_PROGRESS' && timeLeft > 0) {
      timer = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            // T·ª± ƒë·ªông n·ªôp b√†i khi h·∫øt th·ªùi gian
            handleAutoSubmit();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [examStatus, timeLeft]);

  // üü¶ NgƒÉn ch·∫∑n reload/back khi ƒëang l√†m b√†i
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (examStatus === 'IN_PROGRESS' && hasUnsavedChanges) {
        e.preventDefault();
        e.returnValue = 'B·∫°n ƒëang trong qu√° tr√¨nh l√†m b√†i thi. N·∫øu tho√°t, b√†i thi s·∫Ω b·ªã h·ªßy. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?';
        return e.returnValue;
      }
    };

    const handlePopState = (e) => {
      if (examStatus === 'IN_PROGRESS') {
        e.preventDefault();
        showExitConfirmation();
        // Push state tr·ªü l·∫°i ƒë·ªÉ ngƒÉn navigation
        window.history.pushState(null, '', window.location.pathname);
      }
    };

    if (examStatus === 'IN_PROGRESS') {
      // Th√™m state v√†o history ƒë·ªÉ detect back button
      window.history.pushState(null, '', window.location.pathname);
      window.addEventListener('beforeunload', handleBeforeUnload);
      window.addEventListener('popstate', handlePopState);
    }

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('popstate', handlePopState);
    };
  }, [examStatus, hasUnsavedChanges]);

  // üü¶ Hi·ªÉn th·ªã x√°c nh·∫≠n tho√°t
  const showExitConfirmation = useCallback(() => {
    confirm({
      title: 'X√°c nh·∫≠n tho√°t kh·ªèi b√†i thi',
      icon: <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />,
      content: (
        <div>
          <p>B·∫°n ƒëang trong qu√° tr√¨nh l√†m b√†i thi.</p>
          <p><strong>C·∫£nh b√°o:</strong> N·∫øu tho√°t b√¢y gi·ªù, b√†i thi s·∫Ω b·ªã h·ªßy v√† b·∫°n kh√¥ng th·ªÉ l√†m l·∫°i.</p>
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?</p>
        </div>
      ),
      okText: 'Tho√°t',
      okType: 'danger',
      cancelText: 'Ti·∫øp t·ª•c l√†m b√†i',
      onOk: () => {
        handleCancelExam();
      },
    });
  }, []);

  // üü¶ H·ªßy b√†i thi
  const handleCancelExam = async () => {
    try {
      // G·ªçi API h·ªßy b√†i thi
      await fetch('http://localhost:9999/api/practice-questions/cancel', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify({ examCode })
      });

      // Reset state
      setExamStatus('NOT_STARTED');
      setQuestions([]);
      setAnswers({});
      setResult(null);
      setTimeLeft(null);
      setHasUnsavedChanges(false);
      
      Modal.info({
        title: 'B√†i thi ƒë√£ b·ªã h·ªßy',
        icon: <StopOutlined style={{ color: '#ff4d4f' }} />,
        content: (
          <div>
            <p>B·∫°n ƒë√£ tho√°t kh·ªèi b√†i thi th√†nh c√¥ng.</p>
            <p><strong>L∆∞u √Ω:</strong> B√†i thi n√†y kh√¥ng th·ªÉ l√†m l·∫°i.</p>
          </div>
        ),
        okText: 'V·ªÅ trang ch·ªß',
        onOk: () => {
          window.location.href = '/';
        }
      });
    } catch (err) {
      console.error('Error canceling exam:', err);
      Modal.error({
        title: 'L·ªói khi h·ªßy b√†i thi',
        icon: <ExclamationCircleOutlined />,
        content: 'C√≥ l·ªói x·∫£y ra khi h·ªßy b√†i thi. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.',
        okText: 'ƒê√≥ng'
      });
    }
  };

  // üü¶ L·∫•y danh s√°ch c√¢u h·ªèi theo examCode
  const fetchQuestions = async () => {
    if (!examCode.trim()) {
      Modal.warning({
        title: 'Thi·∫øu th√¥ng tin',
        icon: <ExclamationCircleOutlined style={{ color: '#faad14' }} />,
        content: (
          <div>
            <p>Vui l√≤ng nh·∫≠p m√£ ƒë·ªÅ thi ƒë·ªÉ ti·∫øp t·ª•c.</p>
            <p>M√£ ƒë·ªÅ thi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.</p>
          </div>
        ),
        okText: 'ƒê√£ hi·ªÉu'
      });
      return;
    }

    try {
      const res = await fetch(`http://localhost:9999/api/practice-questions/access?examCode=${examCode}`, {
        headers: {
          Authorization: 'Bearer ' + localStorage.getItem('token')
        }
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || 'Failed to fetch questions');
      }

      const data = await res.json();
      
      // üî• Ki·ªÉm tra n·∫øu ƒë√£ l√†m b√†i n√†y r·ªìi - s·ª≠ d·ª•ng Modal.error
      if (data.alreadySubmitted) {
        Modal.error({
          title: 'Kh√¥ng th·ªÉ l√†m b√†i thi',
          icon: <StopOutlined style={{ color: '#ff4d4f' }} />,
          content: (
            <div>
              <p><strong>B·∫°n ƒë√£ ho√†n th√†nh b√†i thi n√†y</strong></p>
              <p>M·ªói b√†i thi ch·ªâ ƒë∆∞·ª£c ph√©p l√†m m·ªôt l·∫ßn duy nh·∫•t.</p>
              <p>Vui l√≤ng ch·ªçn b√†i thi kh√°c ho·∫∑c li√™n h·ªá gi√°o vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
            </div>
          ),
          okText: 'ƒê√£ hi·ªÉu',
          onOk: () => {
            setExamCode(''); // Reset exam code
          }
        });
        return;
      }

      const questions = data.questions || data;
      const examDuration = data.duration || 10; // L·∫•y duration t·ª´ response
      const examTopic = data.topic || questions[0]?.topic || 'Kh√¥ng x√°c ƒë·ªãnh';
      
      setQuestions(questions);
      setTopic(examTopic);
      setExamDuration(examDuration);
      setTimeLeft(examDuration * 60); // Convert to seconds
      
      // üî• Hi·ªÉn th·ªã modal x√°c nh·∫≠n b·∫Øt ƒë·∫ßu v·ªõi th√¥ng tin chi ti·∫øt
      confirm({
        title: 'X√°c nh·∫≠n b·∫Øt ƒë·∫ßu b√†i thi',
        icon: <InfoCircleOutlined style={{ color: '#1890ff' }} />,
        width: 500,
        content: (
          <div>
            <div style={{ marginBottom: 16 }}>
              <p><strong>üìã Th√¥ng tin b√†i thi:</strong></p>
              <ul style={{ paddingLeft: 20 }}>
                <li><strong>Ch·ªß ƒë·ªÅ:</strong> {examTopic}</li>
                <li><strong>S·ªë c√¢u h·ªèi:</strong> {questions.length} c√¢u</li>
                <li><strong>Th·ªùi gian:</strong> {examDuration} ph√∫t</li>
                <li><strong>M√£ ƒë·ªÅ:</strong> {examCode}</li>
              </ul>
            </div>
            <Alert 
              message="‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng" 
              description={
                <div>
                  <p>‚Ä¢ Sau khi b·∫Øt ƒë·∫ßu, b·∫°n kh√¥ng th·ªÉ tho√°t v√† l√†m l·∫°i b√†i thi n√†y</p>
                  <p>‚Ä¢ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông n·ªôp b√†i khi h·∫øt th·ªùi gian</p>
                  <p>‚Ä¢ H√£y ƒë·∫£m b·∫£o k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh</p>
                </div>
              }
              type="warning" 
              style={{ marginTop: 16 }}
            />
          </div>
        ),
        okText: 'üöÄ B·∫Øt ƒë·∫ßu l√†m b√†i',
        cancelText: 'H·ªßy',
        onOk: () => {
          startExam();
        },
      });

    } catch (err) {
      console.error(err);
      Modal.error({
        title: 'L·ªói khi t·∫£i ƒë·ªÅ thi',
        icon: <ExclamationCircleOutlined />,
        content: (
          <div>
            <p><strong>Kh√¥ng th·ªÉ t·∫£i ƒë·ªÅ thi</strong></p>
            <p>L√Ω do: {err.message}</p>
            <p>Vui l√≤ng:</p>
            <ul style={{ paddingLeft: 20 }}>
              <li>Ki·ªÉm tra m√£ ƒë·ªÅ thi c√≥ ch√≠nh x√°c kh√¥ng</li>
              <li>ƒê·∫£m b·∫£o k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh</li>
              <li>Th·ª≠ l·∫°i sau v√†i gi√¢y</li>
            </ul>
          </div>
        ),
        okText: 'ƒê√≥ng'
      });
    }
  };

  // üü¶ B·∫Øt ƒë·∫ßu l√†m b√†i
  const startExam = () => {
    setExamStatus('IN_PROGRESS');
    setAnswers({});
    setResult(null);
    setHasUnsavedChanges(false);
    
    // Th√¥ng b√°o b·∫Øt ƒë·∫ßu th√†nh c√¥ng
    Modal.success({
      title: 'B√†i thi ƒë√£ b·∫Øt ƒë·∫ßu',
      icon: <CheckCircleOutlined />,
      content: (
        <div>
          <p>üéØ B·∫°n ƒë√£ b·∫Øt ƒë·∫ßu l√†m b√†i thi th√†nh c√¥ng!</p>
          <p>Ch√∫c b·∫°n l√†m b√†i t·ªët!</p>
        </div>
      ),
      okText: 'B·∫Øt ƒë·∫ßu',
      mask: false, // Cho ph√©p click outside ƒë·ªÉ ƒë√≥ng
      autoFocusButton: null
    });
  };

  // üü¶ X·ª≠ l√Ω ch·ªçn ƒë√°p √°n
  const handleSelect = (questionId, selectedOption) => {
    setAnswers(prev => ({ ...prev, [questionId]: selectedOption }));
    setHasUnsavedChanges(true);
  };

  // üü¶ T·ª± ƒë·ªông n·ªôp b√†i khi h·∫øt th·ªùi gian
  const handleAutoSubmit = async () => {
    Modal.warning({
      title: '‚è∞ H·∫øt th·ªùi gian l√†m b√†i',
      icon: <ClockCircleOutlined style={{ color: '#faad14' }} />,
      content: (
        <div>
          <p><strong>Th·ªùi gian l√†m b√†i ƒë√£ k·∫øt th√∫c!</strong></p>
          <p>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông n·ªôp b√†i c·ªßa b·∫°n.</p>
          <p>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...</p>
        </div>
      ),
      okText: 'ƒê·ªìng √Ω',
      onOk: () => {
        submitExam(true);
      }
    });
  };

  // üü¶ N·ªôp b√†i
  const handleSubmit = async () => {
    const unanswered = questions.filter(q => !answers[q._id]);
    
    if (unanswered.length > 0) {
      confirm({
        title: '‚ùì C√≤n c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi',
        icon: <ExclamationCircleOutlined style={{ color: '#faad14' }} />,
        width: 500,
        content: (
          <div>
            <p><strong>B·∫°n c√≤n {unanswered.length} c√¢u ch∆∞a tr·∫£ l·ªùi:</strong></p>
            <div style={{ 
              maxHeight: 150, 
              overflow: 'auto', 
              border: '1px solid #d9d9d9', 
              padding: 8, 
              borderRadius: 4,
              backgroundColor: '#fafafa',
              margin: '8px 0'
            }}>
              {unanswered.map((q, i) => (
                <div key={i}>‚Ä¢ C√¢u {questions.indexOf(q) + 1}: {q.question.substring(0, 50)}...</div>
              ))}
            </div>
            <p>C√°c c√¢u ch∆∞a tr·∫£ l·ªùi s·∫Ω ƒë∆∞·ª£c t√≠nh l√† sai.</p>
            <p><strong>B·∫°n c√≥ mu·ªën n·ªôp b√†i ngay b√¢y gi·ªù?</strong></p>
          </div>
        ),
        okText: 'üìù N·ªôp b√†i ngay',
        cancelText: 'Ti·∫øp t·ª•c l√†m',
        onOk: () => submitExam(),
      });
    } else {
      confirm({
        title: '‚úÖ X√°c nh·∫≠n n·ªôp b√†i',
        icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,
        content: (
          <div>
            <p><strong>B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ {questions.length} c√¢u h·ªèi!</strong></p>
            <p>Sau khi n·ªôp b√†i, b·∫°n s·∫Ω kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi ƒë√°p √°n.</p>
            <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i kh√¥ng?</p>
          </div>
        ),
        okText: 'üéØ N·ªôp b√†i',
        cancelText: 'Ki·ªÉm tra l·∫°i',
        onOk: () => submitExam(),
      });
    }
  };

  // üü¶ Submit exam logic
  const submitExam = async (isAutoSubmit = false) => {
    setIsSubmitting(true);
    
    try {
      const formattedAnswers = questions.map(q => ({
        questionId: q._id,
        answer: answers[q._id] || '' // Empty string for unanswered
      }));

      const res = await fetch('http://localhost:9999/api/practice-questions/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify({
          examCode,
          answers: formattedAnswers,
          isAutoSubmit
        })
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || 'Failed to submit exam');
      }

      const data = await res.json();
      setResult(data);
      setExamStatus('SUBMITTED');
      setHasUnsavedChanges(false);
      
      // üî• Modal th√†nh c√¥ng v·ªõi th√¥ng tin chi ti·∫øt
      Modal.success({
        title: 'üéâ N·ªôp b√†i th√†nh c√¥ng!',
        icon: <CheckCircleOutlined />,
        width: 500,
        content: (
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: 18, marginBottom: 16 }}>
              <p><strong>üìä K·∫øt qu·∫£ b√†i thi c·ªßa b·∫°n:</strong></p>
            </div>
            <div style={{ 
              padding: 16, 
              backgroundColor: '#f6ffed', 
              border: '1px solid #b7eb8f', 
              borderRadius: 8,
              margin: '16px 0'
            }}>
              <p style={{ fontSize: 24, margin: 0, color: '#52c41a' }}>
                <strong>üèÜ {data.score}/10 ƒëi·ªÉm</strong>
              </p>
              <p style={{ margin: '8px 0 0 0' }}>
                ({data.correct}/{data.total} c√¢u ƒë√∫ng - {((data.correct/data.total)*100).toFixed(1)}%)
              </p>
            </div>
            <p>Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh b√†i thi!</p>
          </div>
        ),
        okText: 'Xem k·∫øt qu·∫£ chi ti·∫øt'
      });

    } catch (err) {
      console.error(err);
      Modal.error({
        title: '‚ùå L·ªói khi n·ªôp b√†i',
        icon: <ExclamationCircleOutlined />,
        content: (
          <div>
            <p><strong>C√≥ l·ªói x·∫£y ra khi n·ªôp b√†i thi</strong></p>
            <p>L√Ω do: {err.message}</p>
            <p>Vui l√≤ng:</p>
            <ul style={{ paddingLeft: 20 }}>
              <li>Ki·ªÉm tra k·∫øt n·ªëi internet</li>
              <li>Th·ª≠ n·ªôp b√†i l·∫°i</li>
              <li>Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp t·ª•c</li>
            </ul>
          </div>
        ),
        okText: 'Th·ª≠ l·∫°i'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // üü¶ Format time display
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // üü¶ Calculate progress
  const answeredCount = Object.keys(answers).length;
  const progressPercent = questions.length > 0 ? (answeredCount / questions.length) * 100 : 0;

  return (
    <div style={{ maxWidth: 900, margin: '0 auto', padding: '20px' }}>
      <Title level={2}>üéì H·ªá th·ªëng thi tr·ª±c tuy·∫øn</Title>

      {examStatus === 'NOT_STARTED' && (
        <Card>
          <Space direction="vertical" style={{ width: '100%' }}>
            <Title level={4}>üîë Nh·∫≠p m√£ ƒë·ªÅ thi</Title>
            <Text type="secondary">
              Vui l√≤ng nh·∫≠p m√£ ƒë·ªÅ thi ƒë·ªÉ b·∫Øt ƒë·∫ßu l√†m b√†i
            </Text>
            <Input
              placeholder="Nh·∫≠p m√£ examCode (v√≠ d·ª•: EXAM2024001)"
              value={examCode}
              onChange={e => setExamCode(e.target.value)}
              style={{ width: 400 }}
              onPressEnter={fetchQuestions}
              size="large"
            />
            <Button 
              type="primary" 
              size="large" 
              onClick={fetchQuestions}
              style={{ minWidth: 200 }}
            >
              üöÄ L·∫•y ƒë·ªÅ thi
            </Button>
          </Space>
        </Card>
      )}

      {examStatus === 'IN_PROGRESS' && (
        <div>
          {/* Header with timer and progress */}
          <Card style={{ marginBottom: 24 }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <div>
                <Title level={4} style={{ margin: 0 }}>
                  üìù {topic}
                </Title>
                <Text type="secondary">
                  ƒê√£ tr·∫£ l·ªùi: {answeredCount}/{questions.length} c√¢u
                </Text>
              </div>
              <div style={{ textAlign: 'right' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                  <ClockCircleOutlined />
                  <Text strong style={{ fontSize: 18, color: timeLeft < 300 ? '#ff4d4f' : '#1890ff' }}>
                    {formatTime(timeLeft)}
                  </Text>
                </div>
                <Progress 
                  percent={progressPercent} 
                  size="small" 
                  style={{ width: 200, marginTop: 8 }}
                  strokeColor={progressPercent === 100 ? '#52c41a' : '#1890ff'}
                />
              </div>
            </div>
          </Card>

          {/* Questions */}
          {questions.map((q, index) => (
            <Card key={q._id} style={{ marginBottom: 16 }}>
              <div style={{ marginBottom: 16 }}>
                <Text strong style={{ fontSize: 16 }}>
                  C√¢u {index + 1}: {q.question}
                  {answers[q._id] && <CheckCircleOutlined style={{ color: '#52c41a', marginLeft: 8 }} />}
                </Text>
              </div>
              <Radio.Group
                onChange={e => handleSelect(q._id, e.target.value)}
                value={answers[q._id]}
                style={{ width: '100%' }}
              >
                <Space direction="vertical" style={{ width: '100%' }}>
                  {q.options.map((opt, i) => (
                    <Radio key={i} value={opt}>
                      {opt}
                    </Radio>
                  ))}
                </Space>
              </Radio.Group>
            </Card>
          ))}

          {/* Submit button */}
          <Card>
            <div style={{ textAlign: 'center' }}>
              <Button 
                type="primary" 
                size="large" 
                onClick={handleSubmit}
                loading={isSubmitting}
                style={{ minWidth: 200 }}
              >
                üì§ N·ªôp b√†i thi
              </Button>
              <div style={{ marginTop: 16 }}>
                <Text type="secondary">
                  ƒê√£ tr·∫£ l·ªùi {answeredCount}/{questions.length} c√¢u h·ªèi
                  {answeredCount === questions.length && 
                    <span style={{ color: '#52c41a', marginLeft: 8 }}>‚úÖ Ho√†n th√†nh</span>
                  }
                </Text>
              </div>
            </div>
          </Card>
        </div>
      )}

      {examStatus === 'SUBMITTED' && result && (
        <Card>
          <div style={{ textAlign: 'center' }}>
            <Title level={3}>
              üéâ Ho√†n th√†nh b√†i thi
            </Title>
            
            <div style={{ fontSize: 18, marginBottom: 24 }}>
              <p><strong>üìã Ch·ªß ƒë·ªÅ:</strong> {topic}</p>
              <p><strong>‚úÖ S·ªë c√¢u ƒë√∫ng:</strong> {result.correct}/{result.total}</p>
              <p><strong>üèÜ ƒêi·ªÉm s·ªë:</strong> 
                <span style={{ 
                  fontSize: 32, 
                  color: result.score >= 5 ? '#52c41a' : '#ff4d4f',
                  marginLeft: 8 
                }}>
                  {result.score}/10
                </span>
              </p>
            </div>

            <Alert
              message="‚úÖ B√†i thi ƒë√£ ho√†n th√†nh"
              description="C·∫£m ∆°n b·∫°n ƒë√£ tham gia. K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng."
              type="success"
              style={{ marginBottom: 16 }}
            />

            <Space>
              <Button type="primary" onClick={() => window.location.href = '/'}>
                üè† V·ªÅ trang ch·ªß
              </Button>
              <Button onClick={() => {
                setExamStatus('NOT_STARTED');
                setExamCode('');
                setQuestions([]);
                setAnswers({});
                setResult(null);
                setTimeLeft(null);
                setHasUnsavedChanges(false);
              }}>
                üìù L√†m b√†i kh√°c
              </Button>
            </Space>
          </div>
        </Card>
      )}
    </div>
  );
};

export default EnterPracticeExam;