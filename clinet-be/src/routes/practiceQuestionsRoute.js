const express = require('express');
const router = express.Router();
const PracticeQuestion = require('../models/PracticeQuestion');
const PracticeResult = require('../models/PracticeResult'); // ‚úÖ NEW
const authMiddleware = require('../middleware/authMiddleware');
const sendNotification = require('../utils/sendNotification');


// ‚úÖ [1] Admin t·∫°o c√¢u h·ªèi √¥n t·∫≠p
router.post('/', authMiddleware(true), async (req, res) => {
  try {
    const { topic, examCode, questions, duration } = req.body;

    if (!topic || !examCode || !Array.isArray(questions) || questions.length === 0) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin ho·∫∑c m·∫£ng c√¢u h·ªèi kh√¥ng h·ª£p l·ªá' });
    }

    // Ki·ªÉm tra t·ª´ng c√¢u h·ªèi c√≥ ƒë·ªß d·ªØ li·ªáu
    const invalid = questions.some(q =>
      !q.question || !q.correctAnswer || !Array.isArray(q.options) || q.options.length !== 4
    );

    if (invalid) {
      return res.status(400).json({ message: 'M·ªôt s·ªë c√¢u h·ªèi thi·∫øu th√¥ng tin ho·∫∑c kh√¥ng h·ª£p l·ªá' });
    }

    // Chu·∫©n h√≥a t·ª´ng c√¢u h·ªèi tr∆∞·ªõc khi insert
    const formattedQuestions = questions.map(q => ({
      topic,
      examCode,
      duration: duration || 10, // ‚úÖ Th√™m tr∆∞·ªùng th·ªùi gian m·∫∑c ƒë·ªãnh 10 ph√∫t n·∫øu kh√¥ng truy·ªÅn
      question: q.question,
      options: q.options,
      correctAnswer: q.correctAnswer
    }));

    // Th√™m t·∫•t c·∫£ c√¢u h·ªèi v√†o DB
    const result = await PracticeQuestion.insertMany(formattedQuestions);

    res.status(201).json({
      message: `T·∫°o ${result.length} c√¢u h·ªèi th√†nh c√¥ng`,
      count: result.length,
      examCode,
      topic,
      duration: duration || 10
    });
  } catch (err) {
    console.error('L·ªói khi t·∫°o nhi·ªÅu c√¢u h·ªèi √¥n t·∫≠p:', err);
    res.status(500).json({ message: 'T·∫°o c√¢u h·ªèi √¥n t·∫≠p th·∫•t b·∫°i' });
  }
});




router.get('/access', authMiddleware(), async (req, res) => {
  try {
    const { examCode } = req.query;

    if (!examCode) {
      return res.status(400).json({ message: 'Thi·∫øu examCode' });
    }

    // ‚úÖ Ki·ªÉm tra user ƒë√£ l√†m b√†i n√†y ch∆∞a
    const existingResult = await PracticeResult.findOne({
      userId: req.user.id,
      examCode
    });

    if (existingResult) {
      return res.status(400).json({
        message: 'B·∫°n ƒë√£ ho√†n th√†nh b√†i thi n√†y',
        alreadySubmitted: true
      });
    }

    const questions = await PracticeQuestion.find({ examCode });

    if (questions.length === 0) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi' });
    }

    // ‚úÖ ·∫®n ƒë√°p √°n ƒë√∫ng khi tr·∫£ v·ªÅ cho h·ªçc sinh
    const safeQuestions = questions.map(q => ({
      _id: q._id,
      topic: q.topic,
      question: q.question,
      options: q.options
    }));

    // ‚úÖ Tr·∫£ v·ªÅ format m√† frontend mong ƒë·ª£i
    res.json({
      questions: safeQuestions,
      duration: questions[0]?.duration || 10, // L·∫•y duration t·ª´ c√¢u h·ªèi ƒë·∫ßu ti√™n
      topic: questions[0]?.topic,
      examCode: examCode,
      totalQuestions: questions.length,
      alreadySubmitted: false
    });

  } catch (err) {
    console.error('L·ªói l·∫•y c√¢u h·ªèi:', err);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

// ‚úÖ [3] User n·ªôp b√†i & ch·∫•m ƒëi·ªÉm
router.post('/submit', authMiddleware(), async (req, res) => {
  try {
    const { examCode, answers } = req.body;
    const userId = req.user.id;

    if (!examCode || !Array.isArray(answers)) {
      return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu n·ªôp b√†i' });
    }

    // ‚úÖ V·ªõi b√†i luy·ªán t·∫≠p nhanh, l·∫•y theo list _id
    let questions = [];

    if (examCode === 'quick-practice') {
      const questionIds = answers.map(a => a.questionId);
      questions = await PracticeQuestion.find({ _id: { $in: questionIds } });
    } else {
      questions = await PracticeQuestion.find({ examCode });
    }

    if (questions.length === 0) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i luy·ªán t·∫≠p' });
    }

    let correctCount = 0;

    questions.forEach((q) => {
      const userAnswer = answers.find(a => a.questionId === q._id.toString());
      if (userAnswer && userAnswer.answer === q.correctAnswer) {
        correctCount++;
      }
    });

    const total = questions.length;
    const score = (correctCount / total) * 10;

    // ‚úÖ Ch·ªâ l∆∞u k·∫øt qu·∫£ n·∫øu kh√¥ng ph·∫£i luy·ªán t·∫≠p nhanh
    if (examCode !== 'quick-practice') {
      const result = await PracticeResult.create({
        userId,
        examCode,
        correct: correctCount,
        total,
        score: Number(score.toFixed(2))
      });

      // ‚úÖ G·ª≠i th√¥ng b√°o sau khi n·ªôp b√†i th√†nh c√¥ng
      await sendNotification(
        userId,
        'B·∫°n ƒë√£ ho√†n th√†nh b√†i luy·ªán t·∫≠p!',
        `B·∫°n ƒë·∫°t ${Number(score.toFixed(2))}/10 trong b√†i "${examCode}".`,
        'result',
        result._id.toString()
      );
    }


    res.json({
      message: 'N·ªôp b√†i th√†nh c√¥ng',
      correct: correctCount,
      total,
      score: Number(score.toFixed(2)),
      correctAnswers: questions.map(q => ({
        questionId: q._id.toString(),
        correctAnswer: q.correctAnswer
      }))
    });

  } catch (err) {
    console.error('L·ªói khi n·ªôp b√†i luy·ªán t·∫≠p:', err);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});

// ‚úÖ [4] User h·ªßy b√†i thi
router.post('/cancel', authMiddleware(), async (req, res) => {
  try {
    const { examCode } = req.body;
    const userId = req.user.id;

    // C√≥ th·ªÉ l∆∞u log h·ªßy b√†i ho·∫∑c ƒë√°nh d·∫•u
    // const cancelLog = await PracticeCancelLog.create({ userId, examCode, canceledAt: new Date() });

    res.json({ message: 'B√†i thi ƒë√£ ƒë∆∞·ª£c h·ªßy' });

  } catch (error) {
    console.error('L·ªói h·ªßy b√†i:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});
// ‚úÖ [5] Admin l·∫•y t·∫•t c·∫£ ƒë·ªÅ √¥n t·∫≠p (group theo examCode)
router.get('/', authMiddleware(), async (req, res) => {
  try {
    const isAdmin = req.user.role === 'admin';

    const { examCode } = req.query;

    if (examCode) {
      // üë©‚Äçüéì H·ªçc sinh truy c·∫≠p b√†i c·ª• th·ªÉ
      const questions = await PracticeQuestion.find({ examCode });

      if (questions.length === 0) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi' });
      }

      const safeQuestions = questions.map(q => ({
        _id: q._id,
        topic: q.topic,
        question: q.question,
        options: q.options
      }));

      return res.json({
        questions: safeQuestions,
        duration: questions[0]?.duration || 10,
        topic: questions[0]?.topic,
        examCode,
        totalQuestions: questions.length
      });
    }

    if (isAdmin) {
      // üë®‚Äçüíº Admin kh√¥ng truy·ªÅn examCode ‚Üí l·∫•y t·∫•t c·∫£ ƒë·ªÅ
      const allQuestions = await PracticeQuestion.find();

      // Nh√≥m theo examCode
      const grouped = {};
      allQuestions.forEach(q => {
        if (!grouped[q.examCode]) {
          grouped[q.examCode] = {
            examCode: q.examCode,
            topic: q.topic,
            duration: q.duration || 10,
            totalQuestions: 0,
            createdAt: q.createdAt
          };
        }
        grouped[q.examCode].totalQuestions += 1;
      });

      const list = Object.values(grouped).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

      return res.json({
        totalSets: list.length,
        exams: list
      });
    }

    return res.status(400).json({ message: 'Thi·∫øu examCode ho·∫∑c kh√¥ng ƒë·ªß quy·ªÅn' });
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y ƒë·ªÅ √¥n t·∫≠p:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// ‚úÖ [NEW] H·ªçc sinh l·∫•y to√†n b·ªô c√¢u h·ªèi theo topic ƒë·ªÉ luy·ªán t·∫≠p ng·∫´u nhi√™n
router.get('/by-topic', authMiddleware(), async (req, res) => {
  try {
    const { topic } = req.query;
    if (!topic) {
      return res.status(400).json({ message: 'Thi·∫øu topic' });
    }

    const questions = await PracticeQuestion.find({ topic });

    if (questions.length === 0) {
      return res.status(404).json({ message: 'Kh√¥ng c√≥ c√¢u h·ªèi cho ch·ªß ƒë·ªÅ n√†y' });
    }

    const safeQuestions = questions.map(q => ({
      _id: q._id,
      question: q.question,
      options: q.options,
      duration: q.duration || 10 // üëà gi·ªØ duration n·∫øu FE c·∫ßn d√πng
    }));

    const duration = questions[0]?.duration || 10;

    res.json({
      topic,
      duration, // ‚úÖ th√™m duration
      totalQuestions: safeQuestions.length,
      questions: safeQuestions
    });
  } catch (err) {
    console.error('L·ªói l·∫•y c√¢u h·ªèi theo topic:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// ‚úÖ [NEW] L·∫•y danh s√°ch t·∫•t c·∫£ topic (d√†nh cho dropdown luy·ªán t·∫≠p nhanh)
router.get('/topics', authMiddleware(), async (req, res) => {
  try {
    const topics = await PracticeQuestion.distinct('topic');
    res.json({ topics });
  } catch (err) {
    console.error('L·ªói l·∫•y danh s√°ch topic:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// GET /api/practice-questions/topics
router.get('/topics', async (req, res) => {
  try {
    const topics = await PracticeQuestion.distinct('topic');
    res.json({ topics });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ch·ªß ƒë·ªÅ.' });
  }
});
// DELETE /api/practice-questions/topics/:name
router.delete('/topics/:name', async (req, res) => {
  try {
    const topicName = decodeURIComponent(req.params.name);
    const result = await PracticeQuestion.deleteMany({ topic: topicName });
    res.json({ message: `ƒê√£ xo√° ${result.deletedCount} c√¢u h·ªèi trong ch·ªß ƒë·ªÅ "${topicName}"` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Xo√° ch·ªß ƒë·ªÅ th·∫•t b·∫°i.' });
  }
});
// PUT /api/practice-questions/topics/:name
router.put('/topics/:name', async (req, res) => {
  try {
    const oldName = decodeURIComponent(req.params.name);
    const { newName } = req.body;

    const result = await PracticeQuestion.updateMany(
      { topic: oldName },
      { $set: { topic: newName } }
    );

    res.json({ message: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} c√¢u h·ªèi sang ch·ªß ƒë·ªÅ "${newName}"` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ th·∫•t b·∫°i.' });
  }
});
router.get('/metadata', authMiddleware(true), async (req, res) => {
  try {
    const topics = await PracticeQuestion.distinct('topic');
    const examCodes = await PracticeQuestion.distinct('examCode');
    res.json({ topics, examCodes });
  } catch (err) {
    console.error('L·ªói l·∫•y metadata:', err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y metadata.' });
  }
});
// DELETE /api/practice-questions/combo-delete?topic=To√°n&examCode=de123
router.delete('/combo-delete', authMiddleware(true), async (req, res) => {
  try {
    const { topic, examCode } = req.query;

    if (!topic || !examCode) {
      return res.status(400).json({ message: 'Thi·∫øu topic ho·∫∑c examCode' });
    }

    const result = await PracticeQuestion.deleteMany({ topic, examCode });

    res.json({
      message: `‚úÖ ƒê√£ xo√° ${result.deletedCount} c√¢u h·ªèi c√≥ topic "${topic}" v√† m√£ ƒë·ªÅ "${examCode}"`
    });
  } catch (err) {
    console.error('‚ùå L·ªói xo√° theo topic & examCode:', err);
    res.status(500).json({ message: 'Xo√° th·∫•t b·∫°i' });
  }
});
// GET /api/practice-questions/list/:examCode
router.get('/list/:examCode', authMiddleware(true), async (req, res) => {
  try {
    const examCode = req.params.examCode;
    const questions = await PracticeQuestion.find({ examCode }).sort({ createdAt: -1 });

    if (!questions.length) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi cho m√£ ƒë·ªÅ n√†y' });
    }

    res.json({
      examCode,
      totalQuestions: questions.length,
      questions
    });
  } catch (err) {
    console.error('L·ªói l·∫•y danh s√°ch c√¢u h·ªèi theo m√£ ƒë·ªÅ:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});
// GET /api/practice-questions/:id
router.get('/:id', authMiddleware(true), async (req, res) => {
  try {
    const question = await PracticeQuestion.findById(req.params.id);
    if (!question) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi' });
    }
    res.json(question);
  } catch (err) {
    console.error('L·ªói l·∫•y chi ti·∫øt c√¢u h·ªèi:', err);
    res.status(500).json({ message: 'L·ªói server' });
  }
});
// PUT /api/practice-questions/:id
router.put('/:id', authMiddleware(true), async (req, res) => {
  try {
    const { question, topic, options, correctAnswer, duration } = req.body;

    if (!question || !correctAnswer || !Array.isArray(options) || options.length !== 4) {
      return res.status(400).json({ message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' });
    }

    const updated = await PracticeQuestion.findByIdAndUpdate(
      req.params.id,
      { question, topic, options, correctAnswer, duration },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }

    res.json({ message: '‚úÖ ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi', question: updated });
  } catch (err) {
    console.error('L·ªói c·∫≠p nh·∫≠t c√¢u h·ªèi:', err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¢u h·ªèi' });
  }
});
// DELETE /api/practice-questions/:id?examCode=de123
router.delete('/:id', authMiddleware(true), async (req, res) => {
  try {
    const { examCode } = req.query;
    const question = await PracticeQuestion.findById(req.params.id);

    if (!question) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi' });
    }

    if (question.examCode !== examCode) {
      return res.status(403).json({ message: 'Kh√¥ng ƒë√∫ng m√£ ƒë·ªÅ, kh√¥ng ƒë∆∞·ª£c ph√©p xo√°' });
    }

    await PracticeQuestion.findByIdAndDelete(req.params.id);
    res.json({ message: '‚úÖ ƒê√£ xo√° c√¢u h·ªèi th√†nh c√¥ng' });
  } catch (err) {
    console.error('L·ªói xo√° c√¢u h·ªèi:', err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ xo√° c√¢u h·ªèi' });
  }
});
// POST /api/practice-questions/add-one
router.post('/add-one', authMiddleware(true), async (req, res) => {
  try {
    const { topic, examCode, question, options, correctAnswer, duration } = req.body;

    if (!topic || !examCode || !question || !correctAnswer || !Array.isArray(options) || options.length !== 4) {
      return res.status(400).json({ message: 'Thi·∫øu ho·∫∑c sai d·ªØ li·ªáu' });
    }

    const newQuestion = await PracticeQuestion.create({
      topic,
      examCode,
      question,
      options,
      correctAnswer,
      duration: duration || 10
    });

    res.status(201).json({
      message: '‚úÖ ƒê√£ th√™m c√¢u h·ªèi m·ªõi',
      question: newQuestion
    });
  } catch (err) {
    console.error('L·ªói th√™m c√¢u h·ªèi:', err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ th√™m c√¢u h·ªèi' });
  }
});



module.exports = router;
